#Include 'Protheus.ch'
#INCLUDE "PROTHEUS.CH"
#INCLUDE "Topconn.ch"
#INCLUDE "TBICONN.CH"
#INCLUDE "TBICODE.CH"

#DEFINE ENTER CHR(13) + CHR(10)

/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
???Funcao    ?MT103FIM  ? Autor ?Carlos Torres       ? Data ?  02/06/2016 ???
?????????????????????????????????????????????????????????????????????????????
???Descricao ? Ponto de Entrada para gera??o das NDCs de Bonificacoes     ???
???          ? Financeiras por Verba Promocional                          ???
?????????????????????????????????????????????????????????????????????????????
???Uso       ? Generico                                                   ???
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/

User Function MT103FIM()
	
	Local aSF1Alias	:= SF1->(GetArea())
	Local aSD1Alias	:= SD1->(GetArea())
	Local aZA6Alias	:= ZA6->(GetArea())
	Local nOpcao 		:= PARAMIXB[1]  // Op??o Escolhida pelo usuario no array aRotina
	Local nConfirma	:= PARAMIXB[2]  // Se o usuario confirmou a opera??o de grava??o da NFE
	Local aBonif 		:= {}
	Local lOrigemNcc	:= .F.
	Local nVlBrutNDC	:= 0
	Local lSomaNDC 	:= .F.
	Local nTTBrutNDC	:= 0
	Local nItemNDC		:= 0
	Local _cAreaCx  := GetNextAlias()
	Local cTpVerbaTT:= GetMV("MV__FINVTT",.F.,"02") // Tipo de verba: 02 - Verba T?tica ou 03 - Verba Bonifica??o

	Private cD1ITEMCC := ""

	If nConfirma = 1 .AND. SF1->F1_TIPO == "D" .AND. IsInCallStack("MATA103") .AND. (nOpcao=3 .OR. nOpcao=4)

		nVlBrutNDC := SF1->F1_VALBRUT

		// (2) - E1_FILIAL, E1_CLIENTE, E1_LOJA, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, R_E_C_N_O_, D_E_L_E_T_
		SE1->(DbSetOrder(2))
		// (1) - D1_FILIAL, D1_DOC, D1_SERIE, D1_FORNECE, D1_LOJA, D1_COD, D1_ITEM, R_E_C_N_O_, D_E_L_E_T_
		SD1->(DbSetOrder(1))
		SD1->(DbSeek( xFilial("SD1") + SF1->(F1_DOC + F1_SERIE + F1_FORNECE + F1_LOJA) ))
		cD1ITEMCC := Alltrim(SD1->D1_ITEMCTA)
		While !SD1->(Eof()) .AND. SD1->(D1_FILIAL + D1_DOC + D1_SERIE + D1_FORNECE + D1_LOJA) = xFilial("SD1") + SF1->(F1_DOC + F1_SERIE + F1_FORNECE + F1_LOJA)
			nTTBrutNDC	+= SD1->D1_QUANT
			If !Empty(SD1->D1_NFORI)	//D1_NFORI + D1_SERIORI
				ZA6->(DbSetOrder(1))
				ZA6->(DbSeek(xFilial("ZA6")+SF1->(F1_FORNECE+F1_LOJA)))
				lSomaNDC := .F.

				While ZA6->ZA6_FILIAL + ZA6->ZA6_CLIENT + ZA6->ZA6_LOJA = xFilial("ZA6")+SF1->(F1_FORNECE+F1_LOJA) .And. ! ZA6->(Eof())
					If ZA6->ZA6_ITEMC = Alltrim(SD1->D1_ITEMCTA) .OR. Empty(ZA6->ZA6_ITEMC)
						cZA6Prefixo := Alltrim(ZA6->ZA6_TPBON)
						If TamSX3("E1_PREFIXO")[1] > TamSX3("ZA6_TPBON")[1]
							cZA6Prefixo += Space(TamSX3("E1_PREFIXO")[1] - TamSX3("ZA6_TPBON")[1])
						EndIf
					/* A chave da tabela SE1 exige a parcela porem quando gerada a NCC de verba dependendo da condi??o pode 
					gerar com parcela (E1_PARCELA) igual a VAZIO ou n (onde n= 01,02,03...) por isso ? necess?rio LOOP */
					SE1->(DbSeek( xFilial("SE1") + SF1->(F1_FORNECE + F1_LOJA) + cZA6Prefixo + SD1->D1_NFORI ))
						While !SE1->(Eof()) .AND. SE1->(E1_FILIAL + E1_CLIENTE + E1_LOJA + E1_PREFIXO + E1_NUM) = (xFilial("SE1") + SF2->(F2_CLIENTE + F2_LOJA) + cZA6Prefixo + SD1->D1_NFORI)
							If SE1->E1_TIPO = "NCC"
							lOrigemNcc := .T.
							lSomaNDC := .T.
							EndIf
						SE1->(DbSkip())
						End
					EndIf
				ZA6->(DbSkip())
				End
				If lSomaNDC
				nItemNDC	+= SD1->D1_QUANT
				//nValBrut	+= SD1->D1_VALBRUT
				//nIcmsRet	+= SD1->D1_ICMSRET
				//nValIcm	+= SD1->D1_VALICM
				//nValIpi	+= SD1->D1_VALIPI				
				EndIf
				If .NOT. lOrigemNcc

				EndIf
			EndIf
		SD1->(DbSkip())
		End
	
		If lOrigemNcc
		/* recalcular o valor bruto para gera??o da NDC proporcionalmente ao itens que participaram na gera??o da NCC */
		nVlBrutNDC := ( nVlBrutNDC * nItemNDC ) / nTTBrutNDC
		
		ZA6->(DbSetOrder(1))
		ZA6->(DbSeek(xFilial("ZA6")+SF1->(F1_FORNECE+F1_LOJA)))
			While ZA6->ZA6_FILIAL + ZA6->ZA6_CLIENT + ZA6->ZA6_LOJA = xFilial("ZA6")+SF1->(F1_FORNECE+F1_LOJA) .And. ! ZA6->(Eof())
				If ZA6->ZA6_ITEMC = cD1ITEMCC .OR. Empty(ZA6->ZA6_ITEMC)
				Aadd(aBonif, {ZA6->ZA6_TPBON, ZA6->ZA6_PERC, ZA6->ZA6_ABIMP})
				EndIf
			ZA6->(DbSkip())
			End
		
			If ! Empty(aBonif)
				If nOpcao=3 .OR. nOpcao=4
				Processa({|| GeraNDC(aBonif,nVlBrutNDC)},"Gerando NDCs " + SF1->F1_FORNECE + "-" + SF1->F1_LOJA + "-" + Alltrim(Posicione("SA1",1,xFilial("SA1")+SF1->(F1_FORNECE+F1_LOJA),"A1_NOME")) + "...")
				EndIf
			EndIf
		EndIf

		If SC5->(FIELDPOS("C5_DESCTAT")) > 0
	
		_cQryCx := "SELECT " + ENTER 
		_cQryCx += "	ISNULL(MAX(C5_PERCTAT),0) AS C5_PERCTAT " + ENTER 
		_cQryCx += "	,ISNULL(MAX(C5_DESCTAT),'') AS C5_DESCTAT " + ENTER 
		_cQryCx += "FROM " + RetSQLName("SD1") + " SD1 WITH(NOLOCK) " + ENTER 
		_cQryCx += "INNER JOIN " + RetSQLName("SD2") + " SD2 WITH(NOLOCK) " + ENTER 
		_cQryCx += "ON D2_FILIAL=D1_FILIAL " + ENTER 
		_cQryCx += "AND D2_DOC=D1_NFORI " + ENTER 
		_cQryCx += "AND D2_SERIE=D1_SERIORI " + ENTER 
		_cQryCx += "AND D2_COD=D1_COD " + ENTER 
		_cQryCx += "AND D2_ITEM=D1_ITEMORI " + ENTER 
		_cQryCx += "AND SD2.D_E_L_E_T_='' " + ENTER 
		_cQryCx += "INNER JOIN " + RetSQLName("SC5") + " SC5 WITH(NOLOCK) " + ENTER 
		_cQryCx += "ON C5_FILIAL=D1_FILIAL " + ENTER 
		_cQryCx += "AND C5_NUM=D2_PEDIDO " + ENTER 
		_cQryCx += "AND SC5.D_E_L_E_T_='' " + ENTER 
		_cQryCx += "AND C5_CONDPAG NOT IN ('N01','N02') " + ENTER 
		_cQryCx += "INNER JOIN " + RetSQLName("SA1") + " SA1 WITH(NOLOCK) " + ENTER 
		_cQryCx += "ON A1_FILIAL=D1_FILIAL " + ENTER 
		_cQryCx += "AND A1_COD=C5_CLIENTE " + ENTER 
		_cQryCx += "AND A1_LOJA=C5_LOJACLI " + ENTER 
		_cQryCx += "AND SA1.D_E_L_E_T_='' " + ENTER 
		_cQryCx += "AND A1_BCO1!='999' " + ENTER 
		_cQryCx += "WHERE D1_FILIAL='" + xFilial("SD1") + "' " + ENTER 
		_cQryCx += "AND D1_DOC='" + SF1->F1_DOC + "' " + ENTER 
		_cQryCx += "AND D1_SERIE='" + SF1->F1_SERIE + "' " + ENTER 
		_cQryCx += "AND D1_FORNECE='" + SF1->F1_FORNECE + "' " + ENTER 
		_cQryCx += "AND D1_LOJA='" + SF1->F1_LOJA + "' " + ENTER 
		_cQryCx += "AND SD1.D_E_L_E_T_='' " + ENTER 

		MEMOWRITE(PROCNAME() + "_" + ALLTRIM(STR(PROCLINE())) + ".SQL",_cQryCx)

		DBUseArea(.T., "TOPCONN", TCGenQry(,, _cQryCx), (_cAreaCx), .F., .T.)

		DBSelectArea(_cAreaCx)

			If ALLTRIM((_cAreaCx)->C5_DESCTAT) == cTpVerbaTT .AND. (_cAreaCx)->C5_PERCTAT > 0
			Processa({|| GeraDevVTT( nVlBrutNDC, (_cAreaCx)->C5_PERCTAT)},"Gerando Verba T?tica ...")
			EndIf
		EndIf
	/* Fim do processamento de verba t?tica */
	
	EndIf
ZA6->(RestArea(aZA6Alias))
SF1->(RestArea(aSF1Alias))
SD1->(RestArea(aSD1Alias))

Return NIL

/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
???Funcao    ?GeraNDC   ? Autor ?Carlos Torres     ? Data ?  02/06/2016   ???
?????????????????????????????????????????????????????????????????????????????
???Descricao ? Grava??o das NDCs de Bonificacoes Financeiras por Verba    ???
???          ? Promocional                                                ???
?????????????????????????????????????????????????????????????????????????????
???Uso       ? Generico                                                   ???
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/

Static Function GeraNDC(aBonif, _nVlEntrada )

	Local aFIN040
	Local cNatureza:= GetMv("TF_NDCBON",,"NCCVCDC")
	Local cTipo	:= "NDC"
	Local nValor	:= _nVlEntrada
	Local cNDChist	:= ""
	Local cNDCvalo	:= 0
	Local cNDCclie	:= ""

	//Local nValBrut	:= 0
	//Local nIcmsRet	:= 0
	//Local nValIcm	:= 0
	//Local nValIpi	:= 0
	Local nPercLiq	:= 0
	Local aSE1Alias := SE1->(GetArea())
	Local aSA1Alias := SA1->(GetArea())
	Local nX := 0
	Local n	 := 0

	Private aGets, aTela            //Variaveis auxiliares da Enchoice
	Private lMsHelpAuto := .t.
	Private lMsErroAuto := .f.

	SA1->(DbSeek( xFilial("SA1") + SF1->F1_FORNECE + SF1->F1_LOJA ))
	cNDCclie	:= Substr(Alltrim(SA1->A1_NOME),1,TamSX3("E1_NOMCLI")[1])

	aFin040 := {}

	For nX := 1 to Len(aBonif)

		IncProc("Gerando NDCs da parcela - Bonifica??o " + Alltrim(Posicione("SX5",1,xFilial("SX5")+"ZC"+aBonif[nX,1],"X5_DESCRI")))

		//????????????????????????????
		//?Verifica se abate impostos?
		//????????????????????????????
		cNDCvalo	:= nValor * aBonif[nx,2] / 100 * If(aBonif[nX,3] = "1",nPercLiq,1)
		cNDChist	:= "Estorno Bonifica??o " + Posicione("SX5",1,xFilial("SX5")+"ZC"+aBonif[nX,1],"X5_DESCRI")

		AADD(aFIN040,{ {"E1_PREFIXO"	,	aBonif[nX,1]	,nil},;
			{"E1_NUM"		,	SF1->F1_DOC		,nil},;
			{"E1_PARCELA"	,	Space(TamSX3("E1_PARCELA")[1])				,nil},;
			{"E1_TIPO"		,	cTipo				,nil},;
			{"E1_NATUREZ"	,	cNatureza			,nil},;
			{"E1_CLIENTE"	,	SF1->F1_FORNECE	,nil},;
			{"E1_LOJA"		,	SF1->F1_LOJA		,nil},;
			{"E1_NOMCLI"	,	cNDCclie			,nil},;
			{"E1_EMISSAO"	,	dDataBase			,nil},;
			{"E1_VENCTO"	,	dDataBase			,nil},;
			{"E1_VENCREA"	,	DataValida(dDataBase,.T.)			,nil},;
			{"E1_VALOR"	,	cNDCvalo			,nil},;
			{"E1_HIST"		,	cNDChist			,nil},;
			{"E1_ITEMC"	,	cD1ITEMCC			,nil}	 })

	Next nX



	Begin Transaction

		lMsErroAuto := .F. // variavel interna da rotina automatica
		lMsHelpAuto := .F.

		For n := 1 to len(aFIN040)
			MSExecAuto({|x,y| FINA040(x,y)},aFIN040[n],3)
			If LMsErroAuto
				MostraErro()
				DisarmTransaction()
				Break
			Endif
		Next

	End Transaction
	SE1->(RestArea(aSE1Alias))
	SA1->(RestArea(aSA1Alias))
Return(.t.)


/*
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
???Funcao    ?EstornaNDC   ? Autor ?Carlos Torres  ? Data ?  06/06/2016   ???
?????????????????????????????????????????????????????????????????????????????
???Descricao ? Estorno das NDCs de Bonificacoes Financeiras por Verba     ???
???          ? Promocional                                                ???
?????????????????????????????????????????????????????????????????????????????
???Uso       ? Generico                                                   ???
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????????????????????????
*/

Static Function GeraDevVTT(__NVLDEVOL,__NPERCTAT)
	Local aFin040	:= {}
	Local aSE1Alias := SE1->(GetArea())
	Local _cParcel	:= Space(TamSX3("E1_PARCELA")[1])
	Local __NVLNDCTT 	:= (__NVLDEVOL * ( __NPERCTAT/100 ) )
	Local n := 0

	// (2) - E1_FILIAL, E1_CLIENTE, E1_LOJA, E1_PREFIXO, E1_NUM, E1_PARCELA, E1_TIPO, R_E_C_N_O_, D_E_L_E_T_
	SE1->(DbSetOrder(2))
	If .NOT. SE1->(DbSeek( xFilial("SE1") + SF1->F1_FORNECE + SF1->F1_LOJA + SF1->F1_SERIE + SF1->F1_DOC + _cParcel + "NDC" ))
		AADD(aFIN040,{ {"E1_PREFIXO"	,	SF1->F1_SERIE	,nil},;
			{"E1_NUM"		,	SF1->F1_DOC					,nil},;
			{"E1_PARCELA"	,	_cParcel					,nil},;
			{"E1_EMISSAO"	,	dDataBase					,nil},;
			{"E1_VENCTO"	,	dDataBase					,nil},;
			{"E1_VENCREA"	,	DataValida(dDataBase,.T.)	,nil},;
			{"E1_TIPO"		,	"NDC"						,nil},;
			{"E1_NATUREZ"	,	"NCCAB+"					,nil},;
			{"E1_VALOR"		,	__NVLNDCTT					,nil},;
			{"E1_HIST"		,	"DEVOLUCAO VB TT"			,nil},;
			{"E1_CLIENTE"	,	SF1->F1_FORNECE				,nil},;
			{"E1_LOJA"		,	SF1->F1_LOJA				,nil}	 })

		lMsErroAuto := .F. // variavel interna da rotina automatica
		lMsHelpAuto := .F.

		For n := 1 to len(aFIN040)
			MSExecAuto({|x,y| FINA040(x,y)},aFIN040[n],3)
			If LMsErroAuto
				MostraErro()
			Endif
		Next
	EndIf

	SE1->(RestArea(aSE1Alias))
Return(.T.)

